{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\lac\\\\src\\\\formik-wrappers\\\\FormikLoginContainer.js\";\nimport React from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport FormikControl from \"./FormikControl\";\nimport { CCol, CRow, CButton } from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport AuthService from \"../../../services/auth.service\";\nvar initialValues = {\n  email: \"\",\n  password: \"\"\n};\nvar validationSchema = Yup.object({\n  email: Yup.string().email(\"Invalid Mail Format\").required(\"required\"),\n  password: Yup.string().required(\"required\")\n});\n\nvar onSubmit = function onSubmit(values, onSubmitProps) {\n  //console.log('form values',values);\n  onSubmitProps.setSubmitting(true);\n  AuthService.login(values.email, values.password).then(function () {\n    props.history.push(\"/profile\"); //window.location.reload();\n  }, function (error) {\n    if (error.response) {\n      var resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n\n      switch (error.response.code) {\n        case '401':\n          setMessage('Invalid Username or Password');\n\n        default:\n          setMessage('Invalid Username or Password');\n      }\n    } else {//setMessage(error.message)\n    } //setLoading(false);\n\n  }); //onSubmitProps.resetForm()\n  //alert(\"Submit\");\n};\n\nfunction FormikLoginContainer() {\n  var _this = this;\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, function (formik) {\n    console.log(\"formik\", formik);\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormikControl, {\n      control: \"input\",\n      type: \"email\",\n      name: \"email\",\n      label: \"Email\",\n      placeholder: \"Email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FormikControl, {\n      control: \"input\",\n      type: \"password\",\n      name: \"password\",\n      label: \"Password\",\n      placeholder: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CRow, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CCol, {\n      xs: \"6\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CButton, {\n      type: \"submit\",\n      color: \"primary\",\n      className: \"px-4\",\n      disabled: formik.isSubmitting === true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, \"Login\")), /*#__PURE__*/React.createElement(CCol, {\n      xs: \"6\",\n      className: \"text-right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CButton, {\n      color: \"link\",\n      className: \"px-0\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, \"Forgot password?\"))));\n  });\n}\n\nexport default FormikLoginContainer;","map":{"version":3,"sources":["C:/react/lac/src/formik-wrappers/FormikLoginContainer.js"],"names":["React","Formik","Form","Field","ErrorMessage","Yup","FormikControl","CCol","CRow","CButton","CIcon","AuthService","initialValues","email","password","validationSchema","object","string","required","onSubmit","values","onSubmitProps","setSubmitting","login","then","props","history","push","error","response","resMessage","data","message","toString","code","setMessage","FormikLoginContainer","formik","console","log","isSubmitting"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport FormikControl from \"./FormikControl\";\r\nimport { CCol, CRow, CButton } from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport AuthService from \"../../../services/auth.service\";\r\n\r\nconst initialValues = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n  email: Yup.string().email(\"Invalid Mail Format\").required(\"required\"),\r\n  password: Yup.string().required(\"required\"),\r\n});\r\n\r\nconst onSubmit = (values, onSubmitProps) => {\r\n  //console.log('form values',values);\r\n  onSubmitProps.setSubmitting(true)\r\n  AuthService.login(values.email, values.password).then(\r\n    () => {\r\n      props.history.push(\"/profile\");\r\n      //window.location.reload();\r\n    },\r\n    (error) => {\r\n      if (error.response) {\r\n\r\n      const resMessage =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n\r\n      switch(error.response.code){\r\n          case '401':\r\n                setMessage('Invalid Username or Password')\r\n                default:\r\n                setMessage('Invalid Username or Password')\r\n\r\n      }\r\n      }else{\r\n        //setMessage(error.message)\r\n      }\r\n      //setLoading(false);\r\n      \r\n    }\r\n  );\r\n  //onSubmitProps.resetForm()\r\n  //alert(\"Submit\");\r\n};\r\n\r\nfunction FormikLoginContainer() {\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n    >\r\n      {(formik) => {\r\n        console.log(\"formik\", formik);\r\n        return (\r\n          <Form>\r\n            <FormikControl\r\n              control=\"input\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              label=\"Email\"\r\n              placeholder=\"Email\"\r\n            />\r\n\r\n            <FormikControl\r\n              control=\"input\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              placeholder=\"password\"\r\n            />\r\n\r\n            <CRow>\r\n              <CCol xs=\"6\">\r\n                <CButton\r\n                  type=\"submit\"\r\n                  color=\"primary\"\r\n                  className=\"px-4\"\r\n                  disabled={formik.isSubmitting===true}\r\n                >\r\n                  Login\r\n                </CButton>\r\n              </CCol>\r\n              <CCol xs=\"6\" className=\"text-right\">\r\n                <CButton color=\"link\" className=\"px-0\">\r\n                  Forgot password?\r\n                </CButton>\r\n              </CCol>\r\n            </CRow>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default FormikLoginContainer;\r\n"]},"metadata":{},"sourceType":"module"}