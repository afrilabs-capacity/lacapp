{"ast":null,"code":"import _slicedToArray from\"C:\\\\react\\\\lac\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{Formik,Form,Field,ErrorMessage}from\"formik\";import*as Yup from\"yup\";import FormikControl from\"./FormikControl\";import{CCol,CRow,CButton}from\"@coreui/react\";import CIcon from\"@coreui/icons-react\";import AuthService from\"../services/auth.service\";import{withRouter,useHistory,useLocation,Redirect}from\"react-router-dom\";var initialValues={email:\"\",password:\"\"};var validationSchema=Yup.object({email:Yup.string().email(\"Invalid Mail Format\").required(\"required\"),password:Yup.string().required(\"required\")});function FormikLoginContainer(){var history=useHistory();var location=useLocation();var _ref=location.state||{from:{pathname:\"/dashboard\"}},from=_ref.from;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),apiError=_useState2[0],setApiError=_useState2[1];var onSubmit=function onSubmit(values,onSubmitProps){//console.log('form values',values);\nonSubmitProps.setSubmitting(true);AuthService.login(values.email,values.password).then(function(){history.push(\"/dashboard\");//window.location.reload();\n},function(error){if(error.response){var resMessage=error.response&&error.response.data&&error.response.data.message||error.message||error.toString();switch(error.response.code){case\"401\":setApiError(\"Invalid Username or Password\");default:setApiError(\"Invalid Username or Password\");}}else{onSubmitProps.setSubmitting(false);setApiError(error.message);}onSubmitProps.setSubmitting(false);});//onSubmitProps.resetForm()\n//alert(\"Submit\");\n};return/*#__PURE__*/React.createElement(Formik,{initialValues:initialValues,validationSchema:validationSchema,onSubmit:onSubmit},function(formik){console.log(\"formik\",formik);return/*#__PURE__*/React.createElement(Form,null,/*#__PURE__*/React.createElement(FormikControl,{control:\"input\",type:\"text\",name:\"title\",label:\"Title\",placeholder:\"Title\"}),apiError!==null?/*#__PURE__*/React.createElement(CRow,null,/*#__PURE__*/React.createElement(CCol,{xs:\"12\"},/*#__PURE__*/React.createElement(\"div\",{class:\"alert alert-danger\",role:\"alert\"},apiError))):\"\",/*#__PURE__*/React.createElement(CRow,null));});}export default FormikLoginContainer;","map":{"version":3,"sources":["C:/react/lac/src/formik-wrappers/FormikPostEnglish.js"],"names":["React","useState","useEffect","Formik","Form","Field","ErrorMessage","Yup","FormikControl","CCol","CRow","CButton","CIcon","AuthService","withRouter","useHistory","useLocation","Redirect","initialValues","email","password","validationSchema","object","string","required","FormikLoginContainer","history","location","state","from","pathname","apiError","setApiError","onSubmit","values","onSubmitProps","setSubmitting","login","then","push","error","response","resMessage","data","message","toString","code","formik","console","log"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport FormikControl from \"./FormikControl\";\r\nimport { CCol, CRow, CButton } from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport AuthService from \"../services/auth.service\";\r\nimport { withRouter, useHistory,useLocation,Redirect } from \"react-router-dom\";\r\n\r\nconst initialValues = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n  email: Yup.string().email(\"Invalid Mail Format\").required(\"required\"),\r\n  password: Yup.string().required(\"required\"),\r\n});\r\n\r\nfunction FormikLoginContainer() {\r\n      \r\n  const history = useHistory();\r\n  const location= useLocation()\r\n\r\n const { from } = location.state || { from: { pathname: \"/dashboard\" } };\r\n  const [apiError, setApiError] = useState(null);\r\n\r\n  const onSubmit = (values, onSubmitProps) => {\r\n    //console.log('form values',values);\r\n\r\n    onSubmitProps.setSubmitting(true);\r\n    AuthService.login(values.email, values.password).then(\r\n      () => {\r\n        history.push(\"/dashboard\");\r\n        //window.location.reload();\r\n      },\r\n      (error) => {\r\n        if (error.response) {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          switch (error.response.code) {\r\n            case \"401\":\r\n              setApiError(\"Invalid Username or Password\");\r\n            default:\r\n              setApiError(\"Invalid Username or Password\");\r\n          }\r\n        } else {\r\n            onSubmitProps.setSubmitting(false);\r\n          setApiError(error.message);\r\n        }\r\n        onSubmitProps.setSubmitting(false);\r\n      }\r\n    );\r\n    //onSubmitProps.resetForm()\r\n    //alert(\"Submit\");\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n    >\r\n      {(formik) => {\r\n        console.log(\"formik\", formik);\r\n        return (\r\n          <Form>\r\n            <FormikControl\r\n              control=\"input\"\r\n              type=\"text\"\r\n              name=\"title\"\r\n              label=\"Title\"\r\n              placeholder=\"Title\"\r\n            />\r\n\r\n\r\n            {apiError !== null ? (\r\n              <CRow>\r\n              <CCol xs=\"12\">\r\n                <div class=\"alert alert-danger\" role=\"alert\">\r\n                  {apiError}\r\n                </div>\r\n                </CCol>\r\n              </CRow>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n\r\n            <CRow>\r\n              {/* <CCol xs=\"6\">\r\n              \r\n                  { \r\n                    formik.isSubmitting ? \r\n                    <button className=\"btn btn-primary px-4\"  disabled={formik.isSubmitting}>\r\n                      <span\r\n                        className=\"spinner-grow spinner-grow-sm\"\r\n                        role=\"status\"\r\n                        aria-hidden=\"true\"\r\n                      ></span>\r\n                      Loading...\r\n                    </button> : \r\n                    <button className=\"btn btn-primary px-4\"  disabled={formik.isSubmitting}>\r\n                    \r\n                      Login\r\n                    </button>\r\n                  }\r\n                \r\n              </CCol>\r\n              <CCol xs=\"6\" className=\"text-right\">\r\n                <CButton color=\"link\" className=\"px-0\">\r\n                  Forgot password?\r\n                </CButton>\r\n              </CCol> */}\r\n            </CRow>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default FormikLoginContainer;\r\n"]},"metadata":{},"sourceType":"module"}