{"ast":null,"code":"import _slicedToArray from \"C:\\\\react\\\\lac\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\react\\\\lac\\\\src\\\\Uploaders\\\\image-uploader.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport ArticleContext from \"../context/ArticleContext\";\nvar API_URL = \"http://192.168.43.122:8080/laravel/site40/public/api/v1/\";\nvar PUBLIC_URL = \"http://192.168.43.122:8080/laravel/site40/public/\";\n\nvar ImageUpload = function ImageUpload(_ref) {\n  var postType = _ref.postType,\n      target = _ref.target;\n\n  var _useContext = useContext(ArticleContext.Context),\n      setModal = _useContext.setModal; //console.log(\"target\",target)\n\n\n  var triggerSelectInput = function triggerSelectInput(e, input) {\n    e.preventDefault();\n    input.click();\n  };\n\n  useEffect(function () {\n    var uploadBt = document.getElementById(target);\n    var uploadInputName = postType == \"en\" ? \"upload_input_en\" : \"upload_input_fr\";\n    var uploadInput = document.getElementById(uploadInputName);\n    uploadBt.addEventListener(\"click\", function (e) {\n      return triggerSelectInput(e, uploadInput);\n    });\n  }, [imagePreviewUrlEn, imagePreviewUrlEn]);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      imagePreviewUrlEn = _useState2[0],\n      setImagePreviewUrlEn = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      imagePreviewUrlFr = _useState4[0],\n      setImagePreviewUrlFr = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      image = _useState6[0],\n      setImage = _useState6[1];\n\n  console.log(\"French Banner\", imagePreviewUrlFr); //console.log(\"English Banner\",imagePreviewUrlEn)\n\n  var _onChange = function onChange(e) {\n    //console.log(e.target.value)\n    var file = e.target.files[0] || e.dataTransfer.files[0];\n    var allowed_mime_types = ['image/jpeg', 'image/png'];\n    var allowed_size_mb = 5;\n\n    if (allowed_mime_types.indexOf(file.type) == -1) {\n      alert('Error : Incorrect file type');\n      return;\n    }\n\n    if (file.size > allowed_size_mb * 1024 * 1024) {\n      alert('Error : Exceeded size');\n      return;\n    } //alert(\"on change for loading files\")\n\n\n    if (!file) return; //this.createImage(files[0]);\n\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      setImage(reader.result); //postType==\"en\" ? setImagePreviewUrlEn(reader.result) : setImagePreviewUrlFr(reader.result)\n      //console.log(\"image\",e.target.result)\n    };\n\n    reader.readAsDataURL(file);\n    var data = new FormData();\n    data.append(\"file\", file);\n    var uploadInputName = postType == \"en\" ? \"upload_input_en\" : \"upload_input_fr\";\n    var uploadInput = document.getElementById(uploadInputName); // let request = new XMLHttpRequest();\n    // request.open('POST', API_URL+'photo/upload'); \n    // request.addEventListener('load', function(e) {\n    // \tconsole.log(request.response.data);\n    // });\n    // request.send(data);\n\n    axios.request({\n      method: \"post\",\n      url: API_URL + \"photo/upload\",\n      data: data,\n      onUploadProgress: function onUploadProgress(p) {//console.log(p); \n        //this.setState({\n        //fileprogress: p.loaded / p.total\n        //})\n        //console.log(\"loaded\",p.loaded)\n        //console.log(\"total\",p.total)\n      }\n    }).then(function (response) {\n      console.log(\"response\", response);\n      postType == \"en\" ? setImagePreviewUrlEn(\"\".concat(PUBLIC_URL + response.data.data.path + \"/\" + response.data.data.image)) : setImagePreviewUrlFr(reader.result);\n    });\n  };\n\n  var onFormSubmit = function onFormSubmit(e) {//console.log(e.target.value)\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: function onSubmit() {\n      return onFormSubmit;\n    },\n    encType: \"multipart/form-data\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, postType == \"en\" ? /*#__PURE__*/React.createElement(\"input\", {\n    id: \"upload_input_en\",\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    onChange: function onChange(e) {\n      return _onChange(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }) : \"\", /*#__PURE__*/React.createElement(\"img\", {\n    className: \"img-fluid\",\n    src: imagePreviewUrlEn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), postType == \"fr\" ? /*#__PURE__*/React.createElement(\"input\", {\n    id: \"upload_input_fr\",\n    type: \"file\",\n    hidden: true,\n    onChange: function onChange(e) {\n      return _onChange(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }) : \"\", /*#__PURE__*/React.createElement(\"img\", {\n    className: \"img-fluid\",\n    src: imagePreviewUrlFr,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default ImageUpload;","map":{"version":3,"sources":["C:/react/lac/src/Uploaders/image-uploader.js"],"names":["React","useState","useEffect","axios","ArticleContext","API_URL","PUBLIC_URL","ImageUpload","postType","target","useContext","Context","setModal","triggerSelectInput","e","input","preventDefault","click","uploadBt","document","getElementById","uploadInputName","uploadInput","addEventListener","imagePreviewUrlEn","setImagePreviewUrlEn","imagePreviewUrlFr","setImagePreviewUrlFr","image","setImage","console","log","onChange","file","files","dataTransfer","allowed_mime_types","allowed_size_mb","indexOf","type","alert","size","reader","FileReader","onload","result","readAsDataURL","data","FormData","append","request","method","url","onUploadProgress","p","then","response","path","onFormSubmit"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport axios from \"axios\";\r\nimport ArticleContext from \"../context/ArticleContext\"\r\n\r\n\r\nconst API_URL = \"http://192.168.43.122:8080/laravel/site40/public/api/v1/\";\r\n\r\nconst PUBLIC_URL = \"http://192.168.43.122:8080/laravel/site40/public/\";\r\n\r\nconst ImageUpload= ({postType,target})=>{\r\n\r\n  const {setModal}=useContext(ArticleContext.Context)\r\n\r\n    //console.log(\"target\",target)\r\n\r\n    const triggerSelectInput=(e,input)=>{\r\n        e.preventDefault()\r\n        input.click()\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const uploadBt=document.getElementById(target)\r\n        const uploadInputName=postType==\"en\" ? \"upload_input_en\" : \"upload_input_fr\"\r\n        const uploadInput=document.getElementById(uploadInputName)\r\n        uploadBt.addEventListener(\"click\",(e)=>triggerSelectInput(e,uploadInput))\r\n    },[imagePreviewUrlEn,imagePreviewUrlEn])\r\n\r\n    const [imagePreviewUrlEn,setImagePreviewUrlEn]=useState(null)\r\n    const [imagePreviewUrlFr,setImagePreviewUrlFr]=useState(null)\r\n    const [image,setImage]=useState(\"\")\r\n\r\n    console.log(\"French Banner\",imagePreviewUrlFr)\r\n    //console.log(\"English Banner\",imagePreviewUrlEn)\r\n\r\n  \r\n\r\n    const onChange=(e)=>{\r\n        //console.log(e.target.value)\r\n        let file = e.target.files[0] || e.dataTransfer.files[0];\r\n        let allowed_mime_types = [ 'image/jpeg', 'image/png' ];\r\n        let allowed_size_mb = 5;\r\n        \r\n        if(allowed_mime_types.indexOf(file.type) == -1) {\r\n\t\t\talert('Error : Incorrect file type');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(file.size > allowed_size_mb*1024*1024) {\r\n\t\t\talert('Error : Exceeded size');\r\n\t\t\treturn;\r\n\t\t}\r\n        //alert(\"on change for loading files\")\r\n        if (!file)\r\n        return;\r\n        //this.createImage(files[0]);\r\n        let reader = new FileReader();\r\n        reader.onload = (e) => {\r\n        setImage(reader.result)\r\n        //postType==\"en\" ? setImagePreviewUrlEn(reader.result) : setImagePreviewUrlFr(reader.result)\r\n        //console.log(\"image\",e.target.result)\r\n        };\r\n        reader.readAsDataURL(file);\r\n\r\n        let data = new FormData();\r\n        data.append(\"file\",file);\r\n        const uploadInputName=postType==\"en\" ? \"upload_input_en\" : \"upload_input_fr\"\r\n        const uploadInput=document.getElementById(uploadInputName)\r\n    \r\n\r\n\t\t// let request = new XMLHttpRequest();\r\n\t\t// request.open('POST', API_URL+'photo/upload'); \r\n\t\t// request.addEventListener('load', function(e) {\r\n\t\t// \tconsole.log(request.response.data);\r\n\t\t// });\r\n        // request.send(data);\r\n        \r\n        axios.request( {\r\n            method: \"post\", \r\n            url: API_URL+\"photo/upload\", \r\n            data: data, \r\n            onUploadProgress: (p) => {\r\n              //console.log(p); \r\n              //this.setState({\r\n                //fileprogress: p.loaded / p.total\r\n              //})\r\n              //console.log(\"loaded\",p.loaded)\r\n              //console.log(\"total\",p.total)\r\n            }\r\n    \r\n    \r\n          }).then (response => {\r\n              console.log(\"response\",response)\r\n            postType==\"en\" ? setImagePreviewUrlEn(`${PUBLIC_URL+response.data.data.path+\"/\"+response.data.data.image}`) : setImagePreviewUrlFr(reader.result)\r\n          })\r\n    }\r\n\r\n    const onFormSubmit=(e)=>{\r\n        //console.log(e.target.value)\r\n    }\r\n\r\n    return (<form onSubmit={()=>onFormSubmit}  encType=\"multipart/form-data\" >\r\n       \r\n         {postType==\"en\"?\r\n        <input id=\"upload_input_en\" type=\"file\" multiple={true} hidden={true} onChange={(e)=>onChange(e)} />:\"\" }\r\n        <img className=\"img-fluid\" src={imagePreviewUrlEn} />\r\n\r\n        {postType==\"fr\"?\r\n        <input id=\"upload_input_fr\" type=\"file\" hidden={true} onChange={(e)=>onChange(e)} />:\"\" }\r\n        <img className=\"img-fluid\" src={imagePreviewUrlFr} />\r\n\r\n\r\n\r\n        </form>)\r\n     \r\n    \r\n}\r\n\r\nexport default ImageUpload"]},"metadata":{},"sourceType":"module"}