{"ast":null,"code":"import _slicedToArray from \"C:\\\\react\\\\lac\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\react\\\\lac\\\\src\\\\formik-wrappers\\\\FormikLoginContainer.js\";\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport FormikControl from \"./FormikControl\";\nimport { CCol, CRow, CButton } from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport AuthService from \"../services/auth.service\";\nimport { withRouter, useHistory } from \"react-router-dom\";\nvar initialValues = {\n  email: \"\",\n  password: \"\"\n};\nvar validationSchema = Yup.object({\n  email: Yup.string().email(\"Invalid Mail Format\").required(\"required\"),\n  password: Yup.string().required(\"required\")\n});\n\nfunction FormikLoginContainer() {\n  var _this = this;\n\n  var history = useHistory();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      apiError = _useState2[0],\n      setApiError = _useState2[1];\n\n  var onSubmit = function onSubmit(values, onSubmitProps) {\n    //console.log('form values',values);\n    onSubmitProps.setSubmitting(true);\n    AuthService.login(values.email, values.password).then(function () {\n      history.push(\"/dashboard\"); //window.location.reload();\n    }, function (error) {\n      if (error.response) {\n        var resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n\n        switch (error.response.code) {\n          case \"401\":\n            setApiError(\"Invalid Username or Password\");\n\n          default:\n            setApiError(\"Invalid Username or Password\");\n        }\n      } else {\n        onSubmitProps.setSubmitting(false);\n        setApiError(error.message);\n      }\n\n      onSubmitProps.setSubmitting(false);\n    }); //onSubmitProps.resetForm()\n    //alert(\"Submit\");\n  };\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, function (formik) {\n    console.log(\"formik\", formik);\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormikControl, {\n      control: \"input\",\n      type: \"email\",\n      name: \"email\",\n      label: \"Email\",\n      placeholder: \"Email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FormikControl, {\n      control: \"input\",\n      type: \"password\",\n      name: \"password\",\n      label: \"Password\",\n      placeholder: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }), apiError !== null ? /*#__PURE__*/React.createElement(CRow, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CCol, {\n      xs: \"12\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"alert alert-danger\",\n      role: \"alert\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, apiError))) : \"\", /*#__PURE__*/React.createElement(CRow, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CCol, {\n      xs: \"6\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    }, formik.isSubmitting ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary px-4\",\n      disabled: formik.isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"spinner-grow spinner-grow-sm\",\n      role: \"status\",\n      \"aria-hidden\": \"true\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 23\n      }\n    }), \"Loading...\") : /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary px-4\",\n      disabled: formik.isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, \"Login\")), /*#__PURE__*/React.createElement(CCol, {\n      xs: \"6\",\n      className: \"text-right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CButton, {\n      color: \"link\",\n      className: \"px-0\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, \"Forgot password?\"))));\n  });\n}\n\nexport default FormikLoginContainer;","map":{"version":3,"sources":["C:/react/lac/src/formik-wrappers/FormikLoginContainer.js"],"names":["React","useState","Formik","Form","Field","ErrorMessage","Yup","FormikControl","CCol","CRow","CButton","CIcon","AuthService","withRouter","useHistory","initialValues","email","password","validationSchema","object","string","required","FormikLoginContainer","history","apiError","setApiError","onSubmit","values","onSubmitProps","setSubmitting","login","then","push","error","response","resMessage","data","message","toString","code","formik","console","log","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport FormikControl from \"./FormikControl\";\r\nimport { CCol, CRow, CButton } from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport AuthService from \"../services/auth.service\";\r\nimport { withRouter, useHistory } from \"react-router-dom\";\r\n\r\nconst initialValues = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n  email: Yup.string().email(\"Invalid Mail Format\").required(\"required\"),\r\n  password: Yup.string().required(\"required\"),\r\n});\r\n\r\nfunction FormikLoginContainer() {\r\n  const history = useHistory();\r\n  const [apiError, setApiError] = useState(null);\r\n\r\n  const onSubmit = (values, onSubmitProps) => {\r\n    //console.log('form values',values);\r\n\r\n    onSubmitProps.setSubmitting(true);\r\n    AuthService.login(values.email, values.password).then(\r\n      () => {\r\n        history.push(\"/dashboard\");\r\n        //window.location.reload();\r\n      },\r\n      (error) => {\r\n        if (error.response) {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          switch (error.response.code) {\r\n            case \"401\":\r\n              setApiError(\"Invalid Username or Password\");\r\n            default:\r\n              setApiError(\"Invalid Username or Password\");\r\n          }\r\n        } else {\r\n            onSubmitProps.setSubmitting(false);\r\n          setApiError(error.message);\r\n        }\r\n        onSubmitProps.setSubmitting(false);\r\n      }\r\n    );\r\n    //onSubmitProps.resetForm()\r\n    //alert(\"Submit\");\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n    >\r\n      {(formik) => {\r\n        console.log(\"formik\", formik);\r\n        return (\r\n          <Form>\r\n            <FormikControl\r\n              control=\"input\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              label=\"Email\"\r\n              placeholder=\"Email\"\r\n            />\r\n\r\n            <FormikControl\r\n              control=\"input\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              placeholder=\"password\"\r\n            />\r\n\r\n            {apiError !== null ? (\r\n              <CRow>\r\n              <CCol xs=\"12\">\r\n                <div class=\"alert alert-danger\" role=\"alert\">\r\n                  {apiError}\r\n                </div>\r\n                </CCol>\r\n              </CRow>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n\r\n            <CRow>\r\n              <CCol xs=\"6\">\r\n              \r\n                  { \r\n                    formik.isSubmitting ? \r\n                    <button className=\"btn btn-primary px-4\"  disabled={formik.isSubmitting}>\r\n                      <span\r\n                        class=\"spinner-grow spinner-grow-sm\"\r\n                        role=\"status\"\r\n                        aria-hidden=\"true\"\r\n                      ></span>\r\n                      Loading...\r\n                    </button> : \r\n                    <button className=\"btn btn-primary px-4\"  disabled={formik.isSubmitting}>\r\n                    \r\n                      Login\r\n                    </button>\r\n                  }\r\n                \r\n              </CCol>\r\n              <CCol xs=\"6\" className=\"text-right\">\r\n                <CButton color=\"link\" className=\"px-0\">\r\n                  Forgot password?\r\n                </CButton>\r\n              </CCol>\r\n            </CRow>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default FormikLoginContainer;\r\n"]},"metadata":{},"sourceType":"module"}