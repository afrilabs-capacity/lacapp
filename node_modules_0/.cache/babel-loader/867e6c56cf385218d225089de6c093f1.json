{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\react\\\\lac\\\\src\\\\editor\\\\RichText.js\";\n\nimport React, { useContext } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport ArticleContext from \"../context/ArticleContext\";\n\nvar RichText = function RichText(_ref) {\n  var actionType = _ref.actionType;\n\n  var _useContext = useContext(ArticleContext.Context),\n      editMode = _useContext.editMode,\n      article = _useContext.article,\n      updateArticle = _useContext.updateArticle;\n\n  var setUpdateModeOrNot = function setUpdateModeOrNot() {\n    if (actionType == \"en\" && editMode == \"update\" && article.body_en !== null) {\n      return article.body_en;\n    }\n\n    if (actionType == \"fr\" && editMode == \"update\" && article.body_fr !== null) {\n      return article.body_fr;\n    }\n\n    return \"mmmmmmmmmmmmmmm\";\n  };\n\n  var handleEditorChange = function handleEditorChange(content) {// console.log(\n    //   'Content was updated:',\n    //   content\n    // );\n    // console.log(\n    //   'Action Type:',\n    //   actionType\n    // );\n  };\n\n  return /*#__PURE__*/React.createElement(Editor, {\n    key: Math.random(),\n    apiKey: \"mymryl9rtn2npjz2vhp3yovdx2of4phahbqil1sq29upca83\",\n    initialValue: editMode == \"update\" ? setUpdateModeOrNot() : \"\",\n    init: {\n      height: 500,\n      menubar: false,\n      plugins: ['advlist autolink lists link image', 'charmap print preview anchor help', 'searchreplace visualblocks code', 'insertdatetime media table paste wordcount'],\n      toolbar: 'undo redo | formatselect | bold italic | \\\r\n            alignleft aligncenter alignright | \\\r\n            bullist numlist outdent indent | help'\n    },\n    onEditorChange: function onEditorChange(e) {\n      return handleEditorChange(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  });\n};\n\nexport default RichText;","map":{"version":3,"sources":["C:/react/lac/src/editor/RichText.js"],"names":["React","useContext","Editor","ArticleContext","RichText","actionType","Context","editMode","article","updateArticle","setUpdateModeOrNot","body_en","body_fr","handleEditorChange","content","Math","random","height","menubar","plugins","toolbar","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAEA,IAAMC,QAAQ,GAAE,SAAVA,QAAU,OAAiB;AAAA,MAAfC,UAAe,QAAfA,UAAe;;AAAA,oBACQJ,UAAU,CAACE,cAAc,CAACG,OAAhB,CADlB;AAAA,MACxBC,QADwB,eACxBA,QADwB;AAAA,MACfC,OADe,eACfA,OADe;AAAA,MACPC,aADO,eACPA,aADO;;AAK/B,MAAMC,kBAAkB,GAAC,SAAnBA,kBAAmB,GAAI;AAE3B,QAAGL,UAAU,IAAE,IAAZ,IAAoBE,QAAQ,IAAE,QAA9B,IAA0CC,OAAO,CAACG,OAAR,KAAmB,IAAhE,EAAqE;AAEnE,aAAQH,OAAO,CAACG,OAAhB;AAED;;AAGD,QAAGN,UAAU,IAAE,IAAZ,IAAoBE,QAAQ,IAAE,QAA9B,IAA0CC,OAAO,CAACI,OAAR,KAAmB,IAAhE,EAAqE;AAEnE,aAAQJ,OAAO,CAACI,OAAhB;AAED;;AAED,WAAO,iBAAP;AAGD,GAlBD;;AAqBA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAa,CACtC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD,GAVD;;AAaE,sBACE,oBAAC,MAAD;AACA,IAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EADL;AAGA,IAAA,MAAM,EAAC,kDAHP;AAIC,IAAA,YAAY,EAAET,QAAQ,IAAE,QAAV,GAAqBG,kBAAkB,EAAvC,GAA0C,EAJzD;AAKE,IAAA,IAAI,EAAE;AACJO,MAAAA,MAAM,EAAE,GADJ;AAEJC,MAAAA,OAAO,EAAE,KAFL;AAGJC,MAAAA,OAAO,EAAE,CACP,mCADO,EAEP,mCAFO,EAGP,iCAHO,EAIP,4CAJO,CAHL;AASJC,MAAAA,OAAO,EACL;;;AAVE,KALR;AAoBE,IAAA,cAAc,EAAE,wBAACC,CAAD;AAAA,aAAKR,kBAAkB,CAACQ,CAAD,CAAvB;AAAA,KApBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA2BH,CAlED;;AAoEA,eAAejB,QAAf","sourcesContent":["import React,{useContext} from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport ArticleContext from \"../context/ArticleContext\"\r\n\r\nconst RichText =({actionType})=> {\r\n  const {editMode,article,updateArticle}=useContext(ArticleContext.Context)\r\n\r\n\r\n\r\n  const setUpdateModeOrNot=()=>{\r\n\r\n    if(actionType==\"en\" && editMode==\"update\" && article.body_en !==null){\r\n      \r\n      return  article.body_en\r\n\r\n    }\r\n\r\n\r\n    if(actionType==\"fr\" && editMode==\"update\" && article.body_fr !==null){\r\n      \r\n      return  article.body_fr\r\n\r\n    }\r\n\r\n    return \"mmmmmmmmmmmmmmm\"\r\n\r\n\r\n  }\r\n\r\n\r\n  const handleEditorChange = (content) => {\r\n    // console.log(\r\n    //   'Content was updated:',\r\n    //   content\r\n    // );\r\n\r\n    // console.log(\r\n    //   'Action Type:',\r\n    //   actionType\r\n    // );\r\n  }\r\n\r\n  \r\n    return (\r\n      <Editor\r\n      key={Math.random()}\r\n\r\n      apiKey=\"mymryl9rtn2npjz2vhp3yovdx2of4phahbqil1sq29upca83\"\r\n       initialValue={editMode==\"update\" ? setUpdateModeOrNot():\"\"}\r\n        init={{\r\n          height: 500,\r\n          menubar: false,\r\n          plugins: [\r\n            'advlist autolink lists link image',\r\n            'charmap print preview anchor help',\r\n            'searchreplace visualblocks code',\r\n            'insertdatetime media table paste wordcount'\r\n          ],\r\n          toolbar:\r\n            'undo redo | formatselect | bold italic | \\\r\n            alignleft aligncenter alignright | \\\r\n            bullist numlist outdent indent | help'\r\n        }}\r\n\r\n        onEditorChange={(e)=>handleEditorChange(e)}\r\n\r\n        \r\n      />\r\n    );\r\n\r\n}\r\n\r\nexport default RichText;"]},"metadata":{},"sourceType":"module"}