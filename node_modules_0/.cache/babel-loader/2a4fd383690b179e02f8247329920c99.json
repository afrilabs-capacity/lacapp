{"ast":null,"code":"import _classCallCheck from \"C:\\\\react\\\\lac\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\react\\\\lac\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar Paragraph = /*#__PURE__*/function () {\n  _createClass(Paragraph, null, [{\n    key: \"DEFAULT_PLACEHOLDER\",\n\n    /*\r\n    Default placeholder for Paragraph Tool\r\n    @return {string}\r\n    @constructor\r\n    */\n    get: function get() {\n      return '';\n    }\n    /**\r\n    \r\n    Render plugin`s main Element and fill it with saved data\r\n    @param {object} params - constructor params\r\n    @param {ParagraphData} params.data - previously saved data\r\n    @param {ParagraphConfig} params.config - user config for Tool\r\n    @param {object} params.api - editor.js api\r\n    */\n\n  }]);\n\n  function Paragraph(_ref) {\n    var data = _ref.data,\n        config = _ref.config,\n        api = _ref.api;\n\n    _classCallCheck(this, Paragraph);\n\n    this.api = api;\n    this._CSS = {\n      block: this.api.styles.block,\n      wrapper: 'ce-paragraph'\n    };\n    this.CSS = {\n      baseClass: this.api.styles.block,\n      loading: this.api.styles.loader,\n      input: this.api.styles.input,\n      settingsButton: this.api.styles.settingsButton,\n      settingsButtonActive: this.api.styles.settingsButtonActive,\n\n      /**\r\n       * Tool's classes\r\n       */\n      imageHolder: 'utd-image__picture',\n      caption: 'utd-image__caption',\n      link: 'utd-image__link'\n    };\n    this.onKeyUp = this.onKeyUp.bind(this);\n    /**\r\n     * Placeholder for paragraph if it is first Block\r\n     * @type {string}\r\n     */\n\n    this._placeholder = config.placeholder ? config.placeholder : Paragraph.DEFAULT_PLACEHOLDER;\n    this._data = {};\n    this._element = this.drawView(data);\n    this._preserveBlank = config.preserveBlank !== undefined ? config.preserveBlank : false;\n    this.data = data;\n    this.settings = [{\n      name: 'text-left',\n      icon: \"<svg class=\\\"svg-icon\\\" viewBox=\\\"0 0 20 20\\\">\\n    <path fill=\\\"none\\\" d=\\\"M1.683,3.39h16.676C18.713,3.39,19,3.103,19,2.749s-0.287-0.642-0.642-0.642H1.683\\n    c-0.354,0-0.641,0.287-0.641,0.642S1.328,3.39,1.683,3.39z M1.683,7.879h11.545c0.354,0,0.642-0.287,0.642-0.641\\n    s-0.287-0.642-0.642-0.642H1.683c-0.354,0-0.641,0.287-0.641,0.642S1.328,7.879,1.683,7.879z M18.358,11.087H1.683\\n    c-0.354,0-0.641,0.286-0.641,0.641s0.287,0.642,0.641,0.642h16.676c0.354,0,0.642-0.287,0.642-0.642S18.713,11.087,18.358,11.087z\\n     M11.304,15.576H1.683c-0.354,0-0.641,0.287-0.641,0.642s0.287,0.641,0.641,0.641h9.621c0.354,0,0.642-0.286,0.642-0.641\\n    S11.657,15.576,11.304,15.576z\\\"></path>\\n      </svg>\"\n    }, {\n      name: 'text-center',\n      icon: \"<svg class=\\\"svg-icon\\\" viewBox=\\\"0 0 20 20\\\">\\n    <path fill=\\\"none\\\" d=\\\"M1.686,3.327h16.754c0.356,0,0.645-0.288,0.645-0.644c0-0.356-0.288-0.645-0.645-0.645H1.686\\n        c-0.356,0-0.644,0.288-0.644,0.645C1.042,3.039,1.33,3.327,1.686,3.327z M4.263,6.549c-0.356,0-0.644,0.288-0.644,0.645\\n        c0,0.356,0.288,0.644,0.644,0.644h11.599c0.356,0,0.645-0.288,0.645-0.644c0-0.356-0.288-0.645-0.645-0.645H4.263z M18.439,11.06\\n        H1.686c-0.356,0-0.644,0.288-0.644,0.644c0,0.356,0.288,0.645,0.644,0.645h16.754c0.356,0,0.645-0.288,0.645-0.645\\n        C19.084,11.348,18.796,11.06,18.439,11.06z M15.218,15.57H5.552c-0.356,0-0.645,0.288-0.645,0.645c0,0.355,0.289,0.644,0.645,0.644\\n        h9.666c0.355,0,0.645-0.288,0.645-0.644C15.862,15.858,15.573,15.57,15.218,15.57z\\\"></path>\\n</svg>\"\n    }, {\n      name: 'text-right',\n      icon: \"<svg class=\\\"svg-icon\\\" viewBox=\\\"0 0 20 20\\\">\\n    <path fill=\\\"none\\\" d=\\\"M1.321,3.417h17.024C18.707,3.417,19,3.124,19,2.762c0-0.362-0.293-0.655-0.654-0.655H1.321\\n        c-0.362,0-0.655,0.293-0.655,0.655C0.667,3.124,0.959,3.417,1.321,3.417z M18.346,15.857H8.523c-0.361,0-0.655,0.293-0.655,0.654\\n        c0,0.362,0.293,0.655,0.655,0.655h9.822c0.361,0,0.654-0.293,0.654-0.655C19,16.15,18.707,15.857,18.346,15.857z M18.346,11.274\\n        H1.321c-0.362,0-0.655,0.292-0.655,0.654s0.292,0.654,0.655,0.654h17.024c0.361,0,0.654-0.292,0.654-0.654\\n        S18.707,11.274,18.346,11.274z M18.346,6.69H6.56c-0.362,0-0.655,0.293-0.655,0.655C5.904,7.708,6.198,8,6.56,8h11.786\\n        C18.707,8,19,7.708,19,7.345C19,6.983,18.707,6.69,18.346,6.69z\\\"></path>\\n</svg>\"\n    }];\n  }\n\n  _createClass(Paragraph, [{\n    key: \"renderSettings\",\n    value: function renderSettings() {\n      var _this = this;\n\n      var wrapper = document.createElement('div');\n      this.settings.forEach(function (tune) {\n        var el = document.createElement('div');\n        el.classList.add(_this.CSS.settingsButton);\n        el.innerHTML = tune.icon;\n        el.addEventListener('click', function () {\n          _this._toggleTune(tune.name);\n        });\n        el.classList.toggle(!_this.CSS.settingsButtonActive, _this.data[tune.name]);\n        wrapper.appendChild(el);\n      });\n      return wrapper;\n    }\n    /**\r\n    \r\n    Check if text content is empty and set empty string to inner html.\r\n    We need this because some browsers (e.g. Safari) insert\r\n    into empty contenteditanle elements\r\n    @param {KeyboardEvent} e - key up event\r\n    */\n\n  }, {\n    key: \"onKeyUp\",\n    value: function onKeyUp(e) {\n      if (e.code !== 'Backspace' && e.code !== 'Delete') {\n        return;\n      }\n\n      var textContent = this._element.textContent;\n\n      if (textContent === '') {\n        this._element.innerHTML = '';\n      }\n    }\n    /**\r\n    \r\n    Create Tool's view\r\n    @return {HTMLElement}\r\n    @Private\r\n    */\n\n  }, {\n    key: \"drawView\",\n    value: function drawView(data) {\n      var c = data.class ? data.class : '';\n      var div = document.createElement('DIV');\n      div.classList.add(this._CSS.wrapper, this._CSS.block);\n\n      if (c) {\n        div.classList.add(c);\n      }\n\n      div.contentEditable = true;\n      div.dataset.placeholder = this.api.i18n.t(this._placeholder);\n      div.addEventListener('keyup', this.onKeyUp);\n      return div;\n    }\n    /**\r\n    \r\n    Return Tool's view\r\n    @returns {HTMLDivElement}\r\n    @public\r\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this._element;\n    }\n    /**\r\n    \r\n    Method that specified how to merge two Text blocks.\r\n    Called by Editor.js by backspace at the beginning of the Block\r\n    @param {ParagraphData} data\r\n    @public\r\n    */\n\n  }, {\n    key: \"merge\",\n    value: function merge(data) {\n      var newData = {\n        text: this.data.text + data.text,\n        class: this.data.class\n      };\n      this.data = newData;\n    }\n    /**\r\n    \r\n    Validate Paragraph block data:\r\n    check for emptiness\r\n    @param {ParagraphData} savedData — data received after saving\r\n    @returns {boolean} false if saved data is not correct, otherwise true\r\n    @public\r\n    */\n\n  }, {\n    key: \"validate\",\n    value: function validate(savedData) {\n      if (savedData.text.trim() === '' && !this._preserveBlank) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\r\n    \r\n    Extract Tool's data from the view\r\n    @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\r\n    @returns {ParagraphData} - saved data\r\n    @public\r\n    */\n\n  }, {\n    key: \"save\",\n    value: function save(toolsContent) {\n      return {\n        text: toolsContent.innerHTML,\n        class: toolsContent.classList[2]\n      };\n    }\n    /**\r\n    \r\n    On paste callback fired from Editor.\r\n    @param {PasteEvent} event - event with pasted data\r\n    */\n\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(event) {\n      var data = {\n        text: event.detail.data.innerHTML\n      };\n      this.data = data;\n    }\n    /**\r\n    \r\n    Enable Conversion Toolbar. Paragraph can be converted to/from other tools\r\n    */\n\n  }, {\n    key: \"_toggleTune\",\n    //Click on the Settings Button\n    //@Private\n    value: function _toggleTune(tune) {\n      this.data[tune] = !this.data[tune];\n      this._element.classList = \"${this._CSS.wrapper} ${this._CSS.block} ${tune}\";\n    } //Icon and title for displaying at the Toolbox\n    //@return {{icon: string, title: string}}\n\n  }, {\n    key: \"data\",\n\n    /**\r\n    \r\n    Get current Tools`s data\r\n    @returns {ParagraphData} Current data\r\n    @Private\r\n    */\n    get: function get() {\n      var text = this._element.innerHTML;\n      var c = this._element.classList;\n      this._data.text = text;\n      this._data.class = c[2];\n      return this._data;\n    }\n    /**\r\n    \r\n    Store data in plugin:\r\n    at the this._data property\r\n    at the HTML\r\n    @param {ParagraphData} data — data to set\r\n    @Private\r\n    */\n    ,\n    set: function set(data) {\n      this._data = data || {};\n      this._element.innerHTML = this._data.text || ''; // this._element.classList = this._data.class\n    }\n    /**\r\n    \r\n    Used by Editor paste handling API.\r\n    Provides configuration to handle P tags.\r\n    @returns {{tags: string[]}}\r\n    */\n\n  }], [{\n    key: \"conversionConfig\",\n    get: function get() {\n      return {\n        export: 'text',\n        // to convert Paragraph to other block, use 'text' property of saved data\n        import: 'text' // to covert other block's exported string to Paragraph, fill 'text' property of tool data\n\n      };\n    }\n    /**\r\n    \r\n    Sanitizer rules\r\n    */\n\n  }, {\n    key: \"sanitize\",\n    get: function get() {\n      return {\n        text: {\n          br: true\n        }\n      };\n    }\n  }, {\n    key: \"pasteConfig\",\n    get: function get() {\n      return {\n        tags: ['P']\n      };\n    }\n  }, {\n    key: \"toolbox\",\n    get: function get() {\n      return {\n        icon: '<svg width=\"20\" height=\"18\"><path d=\"M10.458 12.04l2.919 1.686-.781 1.417-.984-.03-.974 1.687H8.674l1.49-2.583-.508-.775.802-1.401zm.546-.952l3.624-6.327a1.597 1.597 0 0 1 2.182-.59 1.632 1.632 0 0 1 .615 2.201l-3.519 6.391-2.902-1.675zm-7.73 3.467h3.465a1.123 1.123 0 1 1 0 2.247H3.273a1.123 1.123 0 1 1 0-2.247z\"/></svg>',\n        //this.button.innerHTML = '<svg width=\"20\" height=\"18\"><path d=\"M15.414 0.586c-0.781-0.781-2.047-0.781-2.828 0l-2.689 2.689-1.896-1.896-2.121 2.121 1.663 1.663-7.377 7.377c-0.126 0.126-0.179 0.296-0.161 0.46h-0.004v2.5c0 0.276 0.224 0.5 0.5 0.5h2.5c0 0 0.042 0 0.063 0 0.144 0 0.288-0.055 0.398-0.165l7.377-7.377 1.663 1.663 2.121-2.121-1.896-1.896 2.689-2.689c0.781-0.781 0.781-2.047 0-2.828zM2.705 15h-1.705v-1.705l7.337-7.337 1.704 1.704-7.337 7.337z\"/></svg>,\n        title: 'Text'\n      };\n    }\n  }]);\n\n  return Paragraph;\n}();\n\nexport default Paragraph;","map":{"version":3,"sources":["C:/react/lac/src/api-classes/Paragraph.js"],"names":["Paragraph","data","config","api","_CSS","block","styles","wrapper","CSS","baseClass","loading","loader","input","settingsButton","settingsButtonActive","imageHolder","caption","link","onKeyUp","bind","_placeholder","placeholder","DEFAULT_PLACEHOLDER","_data","_element","drawView","_preserveBlank","preserveBlank","undefined","settings","name","icon","document","createElement","forEach","tune","el","classList","add","innerHTML","addEventListener","_toggleTune","toggle","appendChild","e","code","textContent","c","class","div","contentEditable","dataset","i18n","t","newData","text","savedData","trim","toolsContent","event","detail","export","import","br","tags","title"],"mappings":"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","sourcesContent":["\r\nclass Paragraph {\r\n/*\r\nDefault placeholder for Paragraph Tool\r\n@return {string}\r\n@constructor\r\n*/\r\nstatic get DEFAULT_PLACEHOLDER() {\r\nreturn ''\r\n}\r\n/**\r\n\r\nRender plugin`s main Element and fill it with saved data\r\n@param {object} params - constructor params\r\n@param {ParagraphData} params.data - previously saved data\r\n@param {ParagraphConfig} params.config - user config for Tool\r\n@param {object} params.api - editor.js api\r\n*/\r\nconstructor({ data, config, api }) {\r\nthis.api = api\r\nthis._CSS = {\r\n  block: this.api.styles.block,\r\n  wrapper: 'ce-paragraph',\r\n}\r\nthis.CSS = {\r\n  baseClass: this.api.styles.block,\r\n  loading: this.api.styles.loader,\r\n  input: this.api.styles.input,\r\n  settingsButton: this.api.styles.settingsButton,\r\n  settingsButtonActive: this.api.styles.settingsButtonActive,\r\n\r\n  /**\r\n   * Tool's classes\r\n   */\r\n  imageHolder: 'utd-image__picture',\r\n  caption: 'utd-image__caption',\r\n  link: 'utd-image__link',\r\n}\r\n\r\nthis.onKeyUp = this.onKeyUp.bind(this)\r\n\r\n/**\r\n * Placeholder for paragraph if it is first Block\r\n * @type {string}\r\n */\r\nthis._placeholder = config.placeholder ? config.placeholder : Paragraph.DEFAULT_PLACEHOLDER\r\nthis._data = {}\r\nthis._element = this.drawView(data)\r\nthis._preserveBlank = config.preserveBlank !== undefined ? config.preserveBlank : false\r\n\r\nthis.data = data\r\n\r\nthis.settings = [\r\n  {\r\n    name: 'text-left',\r\n    icon: `<svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\r\n    <path fill=\"none\" d=\"M1.683,3.39h16.676C18.713,3.39,19,3.103,19,2.749s-0.287-0.642-0.642-0.642H1.683\r\n    c-0.354,0-0.641,0.287-0.641,0.642S1.328,3.39,1.683,3.39z M1.683,7.879h11.545c0.354,0,0.642-0.287,0.642-0.641\r\n    s-0.287-0.642-0.642-0.642H1.683c-0.354,0-0.641,0.287-0.641,0.642S1.328,7.879,1.683,7.879z M18.358,11.087H1.683\r\n    c-0.354,0-0.641,0.286-0.641,0.641s0.287,0.642,0.641,0.642h16.676c0.354,0,0.642-0.287,0.642-0.642S18.713,11.087,18.358,11.087z\r\n     M11.304,15.576H1.683c-0.354,0-0.641,0.287-0.641,0.642s0.287,0.641,0.641,0.641h9.621c0.354,0,0.642-0.286,0.642-0.641\r\n    S11.657,15.576,11.304,15.576z\"></path>\r\n      </svg>`,\r\n  },\r\n  {\r\n    name: 'text-center',\r\n    icon: `<svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\r\n    <path fill=\"none\" d=\"M1.686,3.327h16.754c0.356,0,0.645-0.288,0.645-0.644c0-0.356-0.288-0.645-0.645-0.645H1.686\r\n        c-0.356,0-0.644,0.288-0.644,0.645C1.042,3.039,1.33,3.327,1.686,3.327z M4.263,6.549c-0.356,0-0.644,0.288-0.644,0.645\r\n        c0,0.356,0.288,0.644,0.644,0.644h11.599c0.356,0,0.645-0.288,0.645-0.644c0-0.356-0.288-0.645-0.645-0.645H4.263z M18.439,11.06\r\n        H1.686c-0.356,0-0.644,0.288-0.644,0.644c0,0.356,0.288,0.645,0.644,0.645h16.754c0.356,0,0.645-0.288,0.645-0.645\r\n        C19.084,11.348,18.796,11.06,18.439,11.06z M15.218,15.57H5.552c-0.356,0-0.645,0.288-0.645,0.645c0,0.355,0.289,0.644,0.645,0.644\r\n        h9.666c0.355,0,0.645-0.288,0.645-0.644C15.862,15.858,15.573,15.57,15.218,15.57z\"></path>\r\n</svg>`,\r\n  },\r\n  {\r\n    name: 'text-right',\r\n    icon: `<svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\r\n    <path fill=\"none\" d=\"M1.321,3.417h17.024C18.707,3.417,19,3.124,19,2.762c0-0.362-0.293-0.655-0.654-0.655H1.321\r\n        c-0.362,0-0.655,0.293-0.655,0.655C0.667,3.124,0.959,3.417,1.321,3.417z M18.346,15.857H8.523c-0.361,0-0.655,0.293-0.655,0.654\r\n        c0,0.362,0.293,0.655,0.655,0.655h9.822c0.361,0,0.654-0.293,0.654-0.655C19,16.15,18.707,15.857,18.346,15.857z M18.346,11.274\r\n        H1.321c-0.362,0-0.655,0.292-0.655,0.654s0.292,0.654,0.655,0.654h17.024c0.361,0,0.654-0.292,0.654-0.654\r\n        S18.707,11.274,18.346,11.274z M18.346,6.69H6.56c-0.362,0-0.655,0.293-0.655,0.655C5.904,7.708,6.198,8,6.56,8h11.786\r\n        C18.707,8,19,7.708,19,7.345C19,6.983,18.707,6.69,18.346,6.69z\"></path>\r\n</svg>`,\r\n  },\r\n]\r\n}\r\n\r\nrenderSettings() {\r\nlet wrapper = document.createElement('div')\r\n\r\nthis.settings.forEach(tune => {\r\n  let el = document.createElement('div')\r\n\r\n  el.classList.add(this.CSS.settingsButton)\r\n  el.innerHTML = tune.icon\r\n\r\n  el.addEventListener('click', () => {\r\n    this._toggleTune(tune.name)\r\n  })\r\n\r\n  el.classList.toggle(!this.CSS.settingsButtonActive, this.data[tune.name])\r\n  wrapper.appendChild(el)\r\n})\r\nreturn wrapper\r\n}\r\n\r\n/**\r\n\r\nCheck if text content is empty and set empty string to inner html.\r\nWe need this because some browsers (e.g. Safari) insert\r\ninto empty contenteditanle elements\r\n@param {KeyboardEvent} e - key up event\r\n*/\r\nonKeyUp(e) {\r\nif (e.code !== 'Backspace' && e.code !== 'Delete') {\r\nreturn\r\n}\r\nconst { textContent } = this._element\r\n\r\nif (textContent === '') {\r\n  this._element.innerHTML = ''\r\n}\r\n}\r\n\r\n/**\r\n\r\nCreate Tool's view\r\n@return {HTMLElement}\r\n@Private\r\n*/\r\ndrawView(data) {\r\nlet c = data.class ? data.class : ''\r\nlet div = document.createElement('DIV')\r\ndiv.classList.add(this._CSS.wrapper, this._CSS.block)\r\nif (c) {\r\ndiv.classList.add(c)\r\n}\r\ndiv.contentEditable = true\r\ndiv.dataset.placeholder = this.api.i18n.t(this._placeholder)\r\n\r\ndiv.addEventListener('keyup', this.onKeyUp)\r\n\r\nreturn div\r\n}\r\n\r\n/**\r\n\r\nReturn Tool's view\r\n@returns {HTMLDivElement}\r\n@public\r\n*/\r\nrender() {\r\nreturn this._element\r\n}\r\n/**\r\n\r\nMethod that specified how to merge two Text blocks.\r\nCalled by Editor.js by backspace at the beginning of the Block\r\n@param {ParagraphData} data\r\n@public\r\n*/\r\nmerge(data) {\r\nlet newData = {\r\ntext: this.data.text + data.text,\r\nclass: this.data.class,\r\n}\r\nthis.data = newData\r\n}\r\n\r\n/**\r\n\r\nValidate Paragraph block data:\r\ncheck for emptiness\r\n@param {ParagraphData} savedData — data received after saving\r\n@returns {boolean} false if saved data is not correct, otherwise true\r\n@public\r\n*/\r\nvalidate(savedData) {\r\nif (savedData.text.trim() === '' && !this._preserveBlank) {\r\nreturn false\r\n}\r\nreturn true\r\n}\r\n\r\n/**\r\n\r\nExtract Tool's data from the view\r\n@param {HTMLDivElement} toolsContent - Paragraph tools rendered view\r\n@returns {ParagraphData} - saved data\r\n@public\r\n*/\r\nsave(toolsContent) {\r\nreturn {\r\ntext: toolsContent.innerHTML,\r\nclass: toolsContent.classList[2],\r\n}\r\n}\r\n/**\r\n\r\nOn paste callback fired from Editor.\r\n@param {PasteEvent} event - event with pasted data\r\n*/\r\nonPaste(event) {\r\nconst data = {\r\ntext: event.detail.data.innerHTML,\r\n}\r\nthis.data = data\r\n}\r\n\r\n/**\r\n\r\nEnable Conversion Toolbar. Paragraph can be converted to/from other tools\r\n*/\r\nstatic get conversionConfig() {\r\nreturn {\r\nexport: 'text', // to convert Paragraph to other block, use 'text' property of saved data\r\nimport: 'text', // to covert other block's exported string to Paragraph, fill 'text' property of tool data\r\n}\r\n}\r\n/**\r\n\r\nSanitizer rules\r\n*/\r\nstatic get sanitize() {\r\nreturn {\r\ntext: {\r\nbr: true,\r\n},\r\n}\r\n}\r\n/**\r\n\r\nGet current Tools`s data\r\n@returns {ParagraphData} Current data\r\n@Private\r\n*/\r\nget data() {\r\nlet text = this._element.innerHTML\r\nlet c = this._element.classList\r\nthis._data.text = text\r\nthis._data.class = c[2]\r\n\r\nreturn this._data\r\n}\r\n\r\n/**\r\n\r\nStore data in plugin:\r\nat the this._data property\r\nat the HTML\r\n@param {ParagraphData} data — data to set\r\n@Private\r\n*/\r\nset data(data) {\r\nthis._data = data || {}\r\nthis._element.innerHTML = this._data.text || ''\r\n// this._element.classList = this._data.class\r\n}\r\n\r\n/**\r\n\r\nUsed by Editor paste handling API.\r\nProvides configuration to handle P tags.\r\n@returns {{tags: string[]}}\r\n*/\r\nstatic get pasteConfig() {\r\nreturn {\r\ntags: ['P'],\r\n}\r\n}\r\n\r\n\r\n//Click on the Settings Button\r\n//@Private\r\n\r\n_toggleTune(tune) {\r\nthis.data[tune] = !this.data[tune]\r\nthis._element.classList = \"${this._CSS.wrapper} ${this._CSS.block} ${tune}\"\r\n}\r\n\r\n//Icon and title for displaying at the Toolbox\r\n//@return {{icon: string, title: string}}\r\n\r\nstatic get toolbox() {\r\nreturn {\r\nicon: '<svg width=\"20\" height=\"18\"><path d=\"M10.458 12.04l2.919 1.686-.781 1.417-.984-.03-.974 1.687H8.674l1.49-2.583-.508-.775.802-1.401zm.546-.952l3.624-6.327a1.597 1.597 0 0 1 2.182-.59 1.632 1.632 0 0 1 .615 2.201l-3.519 6.391-2.902-1.675zm-7.73 3.467h3.465a1.123 1.123 0 1 1 0 2.247H3.273a1.123 1.123 0 1 1 0-2.247z\"/></svg>',\r\n//this.button.innerHTML = '<svg width=\"20\" height=\"18\"><path d=\"M15.414 0.586c-0.781-0.781-2.047-0.781-2.828 0l-2.689 2.689-1.896-1.896-2.121 2.121 1.663 1.663-7.377 7.377c-0.126 0.126-0.179 0.296-0.161 0.46h-0.004v2.5c0 0.276 0.224 0.5 0.5 0.5h2.5c0 0 0.042 0 0.063 0 0.144 0 0.288-0.055 0.398-0.165l7.377-7.377 1.663 1.663 2.121-2.121-1.896-1.896 2.689-2.689c0.781-0.781 0.781-2.047 0-2.828zM2.705 15h-1.705v-1.705l7.337-7.337 1.704 1.704-7.337 7.337z\"/></svg>,\r\ntitle: 'Text',\r\n}\r\n}\r\n}\r\nexport default Paragraph"]},"metadata":{},"sourceType":"module"}